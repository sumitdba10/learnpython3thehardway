Base 10 : [0-9] Decimal
Base 2 :[0-1] Binary
Base 8 :[0-7] Octal
Base 16: [0-9,A, B, C, D, E, F] Hexadecimal


Decimal:

0...9
as all digits finished, place 0 on right most digit and add 1 on left
9 --> (+1)0 --> 10
10....19
as all digits finished for right position, place 0 and add 1 to left replace
19 --> 1(+1)0 --> 20

..98,99
as all digits finished for both positions left and right, place 0 on both position and add extra 1 on new left position

99 --> (+1)00 --> 100
100,101..119 --> 11(+1)0 --> 120, 121,122.....

999 --> (+1)000 --> 1000.....


Binary:

0-1

0,1
as all digits finished, now place 0 on last digit, and add 1 on new left position

1 --> (+1)0 --> 10,11

100,101,110,111 --> (+1)000 --> 1000

1000,1001,1010,1011,1100,1101,1110,1111

10000,10001,10010,10011, 10100, 10101,10110,10111,11000,11001,11010,11011,11100,11101,11110,11111



Story:

Computer understand binary or base2 i.e. 0 and 1

so, these days we can have 4-bit, 8-bit,16-bit, 32-bit, and 64-bit processor (modern days)

As we know Computer process everything in number, so we have binary system but with limitation

e.g.

4-bit processor can process numbers like:

decimal   Binary
(base10)  (base2)
0           0000
1           0001
2           0010
3           0011
4           0100
5           0101
6           0110
7           0111
8           1000
9           1001
10          1010
11          1011
12          1100
13          1101
14          1110
15          1111

Now, we do not have any more digits, we have all possible digits within 4 bit, next decimal number is 16, which will be 10000 i.e. 5 bits and our 4 bit computer cannot store it.
at any given point a 4-bit computer can store 1111 bits or digits, 8-bit computer can store 1111 1111 bytes or digits and so on

Now, 0-9 is single digit in decimal, while 10-15 is double digit in decimal which needs more space and process slow.

So, the solution is Hexadecimal number system which base16.

Hexadecimal digits: (Base 16) or [0-9,A,B,C,D,E,F]

decimal   Binary       Hexadecimal
(base10)  (base2)       (base16)
0           0000          0
1           0001          1
2           0010          2
3           0011          3
4           0100          4
5           0101          5
6           0110          6
7           0111          7
8           1000          8
9           1001          9
10          1010          A
11          1011          B
12          1100          C
13          1101          D
14          1110          E
15          1111          F



Decimal:  ...10^3+10^2+10^1+10^0
Binary:  ...2^3+2^2+2^1+2^0
Hexadecimal: ...16^3+16^2+16^1+16^0


Computer uses Hexadecimal to save space and print bigger number in single digit.

4-bit computer can store biggest number : 1111 or F or 15
8-bit computer can store biggest number : 1111 1111 or FF or (15*16+15) = 255
16-bit computer can store biggest number : 1111 1111 1111 1111 or FFFF or (15*16^3+15^16^2+15^16+15) = (15*4096+15*256+240+15)=(61440+3840+240+15) = 65535 = ~64k
32-bit computer can store biggest number : 1111 1111 1111 1111 1111 1111 1111 1111 or FFFFFFFF or 4294967295 or 2^32 – 1
64-bit computer can store biggest number : 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 or FFFFFFFFFFFFFFFF or 18446744073709551615 or 2^64 – 1
